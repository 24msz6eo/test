// Executes the actual jobchange and closes.
function	Job_Change	{
	.@previous_class = Class;
	.@to_cls = getarg(0);
	next;
	mes .NPCName$;
	mes "You are now " + callfunc("F_InsertArticle", jobname(.@to_cls)) + "!";
	if (.@to_cls == Job_Novice_High && .LastJob)
		lastJob = Class; // Saves the lastJob for rebirth
	jobchange .@to_cls;
	if (.@to_cls == Job_Novice_High)
		resetlvl(1);
	else if (.@to_cls == Job_Baby) {
		resetstatus;
		resetskill;
		set SkillPoint,0;
	}
	specialeffect2 EF_ANGEL2;
	specialeffect2 EF_ELECTRIC;
	if (.@previous_class != Class) {
		if (.Platinum)
			callfunc "F_GetPlatinumSkills";
		if (.GetJobEquip)
			Get_Job_Equip();
	}
	close; // Always closes after the change
}

function	Confirm_Change	{
	// Player confirms he want to change into .@class
	.@class = getarg(0, -1);
	.@back = getarg(1, false);
	if( .@class < 0 || eaclass(.@class) == -1 ) {
		mes "Unknown Class Error.";
		close;
	}
	mes "Do you want to change into ^0055FF"+jobname(.@class)+"^000000 class?";
	.@job_option$ = " ~ Change into ^0055FF"+jobname(.@class)+"^000000 class";
	if( .@class == Job_Novice_High)
		.@job_option$ = " ~ ^0055FFRebirth^000000";
	
	if (select(.@job_option$+": ~ ^777777" + 
			((.@back) ?"Go back" : "Cancel") + "^000000") == 1) {
		Job_Change(.@class);
	}
	if (!.@back)
		close; // "Cancel" pressed
	return;
}

// Function which gives a job related item to the player
// the items are the rewards from the original job change quests
function	Get_Job_Equip	{
	// Note: The item is dropping, when the player can't hold it.
	// But that's better than not giving the item at all.
	.@eac = eaclass();
	if( .@eac&EAJL_THIRD ) {
		// Third Class Items
		getitem 2795,1;	//	Green Apple Ring for every 3rd Class
		switch(BaseJob) {
			// BaseJob of Third Cls
			// For Normal Third, Baby Third and Transcended Third Cls
			case Job_Knight:
				getitem 5746,1;	break;	//	Rune Circlet [1]
			case Job_Wizard:
				getitem 5753,1;	break;	//	Magic Stone Hat [1]
			case Job_Hunter:
				getitem 5748,1;	break;	//	Sniper Goggle [1]
			case Job_Priest:
				getitem 5747,1;	break;	//	Mitra [1]
			case Job_Blacksmith:
				getitem 5749,1;	break;	//	Driver Band [1]
			case Job_Assassin:
				getitem 5755,1;	break;	//	Silent Executor [1]
			case Job_Crusader:
				getitem 5757,1;	break;	//	Dip Schmidt Helm [1]
			case Job_Sage:
				getitem 5756,1;	break;	//	Wind Whisper [1]
			case Job_Bard:
				getitem 5751,1;	break;	//	Maestro Song's Hat [1]
			case Job_Dancer:
				getitem 5758,1;	break;	//	Dying Swan [1]
			case Job_Monk:
				getitem 5754,1;	break;	//	Blazing Soul [1]
			case Job_Alchemist:
				getitem 5752,1;	break;	//	Midas Whisper[1]
			case Job_Rogue:
				getitem 5750,1; 		//	Shadow Handicraft [1]
				getitem 6121,1;			//	Makeover Brush
				getitem 6122,1;	break;	//	Paint Brush
		}
	} else if (.@eac&EAJL_2) {
		// Second Class (And not Third Class)
		switch(BaseJob) {
			// Second Class
			case Job_Knight:
				getitem 1163,1;	break;	//	Claymore [0]
			case Job_Priest:
				getitem 1522,1;	break;	//	Stunner [0]
			case Job_Wizard:
				getitem 1617,1;	break;	//	Survivor's Rod [0]
			case Job_Blacksmith:
				getitem 1360,1;	break;	//	Two-Handed-Axe [1]
			case Job_Hunter:
				getitem 1718,1;	break;	//	Hunter Bow [0]
			case Job_Assassin:
				getitem 1254,1;	break;	//	Jamadhar [0]
			case Job_Crusader:
				getitem 1410,1;	break;	//	Lance [0]
			case Job_Monk:
				getitem 1807,1;	break;	//	Fist [0]
			case Job_Sage:
				getitem 1550,1;	break;	//	Book [3]
			case Job_Rogue:
				getitem 1222,1;	break;	//	Damascus [1]
			case Job_Alchemist:
				getitem 1126,1;	break;	//	Saber [2]
			case Job_Bard:
				getitem 1907,1;	break;	//	Guitar [0]
			case Job_Dancer:
				getitem 1960,1;	break;	//	Whip [1]
			case Job_Super_Novice:
				getitem 1208,1;	break;	//	Main Gauche [4]
			case Job_Star_Gladiator:
				getitem 1550,1;	break;	//	Book [3]
			case Job_Soul_Linker:
				getitem 1617,1;	break;	//	Survivor's Rod [0]
		}
	} else {
		// Neither Second or Third Cls
		// => First Cls or not covered by the switch
		switch(BaseClass) {
			// First Class
			case Job_Swordman:
				getitem 1108,1;	break;	//	Blade [4]
			case Job_Mage:
				getitem 1602,1;	break;	//	Rod [4]
			case Job_Archer:
				getitem 1705,1;	break;	//	Composite Bow [4]
			case Job_Acolyte:
				getitem 1505,1;	break;	//	Mace [4]
			case Job_Merchant:
				getitem 1302,1;	break;	//	Axe [4]
			case Job_Thief:
				getitem 1208,1;	break;	//	Main Gauche [4]
			case Job_Gunslinger:
				getitem 13101,1; break;	//	Six Shooter [2]
			case Job_Ninja:
				getitem 13010,1; break;	//	Asura [2]
		}
	}
	return;
}

OnInit:
	// Initialisation, do not edit these
	.NPCName$ = "[Job Master]";
	
	// Settings
	.ThirdClass = true;			// Enable third classes?
	.RebirthClass = true;			// Enable rebirth classes?
	.SecondExpanded = true;		// Enable new expanded second classes: Ex. Super Novice, Kagerou/Oboro, Rebellion?
	.BabyNovice = true;	// Enable Baby novice classes? Disable it if you like player must have parent to get job baby.
	.BabyClass = true;				// Enable Baby classes?
	.BabyThird = true;				// Enable Baby third classes?
	.BabyExpanded = true;			// Enable Baby Expanded classes: Ex. Baby Ninja, Baby Taekwon, etc.
	.BabySummoner = true;			// Enable Baby Summoner?
	.LastJob = true;				// Enforce linear class changes?
	.SkillPointCheck = true;		// Force player to use up all skill points?
	.Platinum = true;				// Get platinum skills automatically?
	.GetJobEquip = false;			// Get job equipment (mostly weapons) on job change?

	// Level Requirements
	setarray .Req_First[0],1,10; 		// Minimum base level, job level to turn into 1st class
	setarray .Req_Second[0],1,40; 		// Minimum base level, job level to turn into 2nd class
	setarray .Req_Rebirth[0],99,50;		// Minimum base level, job level to rebirth
	setarray .Req_Third[0],99,50;		// Minimum base level, job level to change to third class
	setarray .Req_Exp_NJ_GS[0],99,70; 	// Minimum base level, job level to turn into Expanded Ninja and Gunslinger
	setarray .Req_Exp_SNOVI[0],99,99; 	// Minimum base level, job level to turn into Expanded Super Novice
	.SNovice = 45;						// Minimum base level to turn into Super Novice
	
	// Setting adjustments by PACKETVER
	if( PACKETVER < 20161207 ) {
		if( .BabyExpanded )
			debugmes "jobmaster: BabyExpanded is disabled due to outdated PACKETVER.";
		if( .BabySummoner )
			debugmes "jobmaster: BabySummoner is disabled due to outdated PACKETVER.";
		.BabyExpanded = false;
		.BabySummoner = false;
	}
	end;
}
